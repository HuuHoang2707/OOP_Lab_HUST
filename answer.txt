1.3.
I. Compare the top-level containers in Swing and AWT
- AWT :
    - Frame: AWT provides the Frame class as its main top-level container.
    Frames are heavyweight components that represent the main window of an application. 
    They can contain menus, buttons, text fields, etc., and are typically used as the main entry point for AWT-based applications.
    - Window: AWT also offers the Window class,
    which is a top-level container similar to Frame. However, unlike Frame, Window does not include the title bar, border, or menu bar.
    It's often used for creating additional windows or dialogs within an application.
- Swing:
    - JFrame: Swing's equivalent to AWT's Frame is the JFrame class. JFrame is a lightweight container that represents
    a top-level window with decorations such as a title bar, border, and optional menu bar. It provides additional
    features over AWT's Frame, such as support for Swing components, pluggable look and feel, and double buffering
    - JDialog: Swing offers the JDialog class for creating dialogs, which are windows that typically pop up to interact 
    with the user or display messages. JDialog is similar to AWT's Window but provides more features and flexibility, 
    including support for Swing components and dialog-specific functionality like modal behavior
II. Compare the class name of components in AWT and the corresponding classâ€™s name in Swing
- Button:
    - AWT: Button
    - Swing: JButton

- Checkbox:
    - AWT: Checkbox
    - Swing: JCheckBox

- Choice:
    - AWT: Choice
    - Swing: JComboBox

- Label:
    - AWT: Label
    - Swing: JLabel

- List:
    - AWT: List
    - Swing: JList

- ScrollPane:
    - AWT: ScrollPane
    - Swing: JScrollPane

- Scrollbar:
    - AWT: Scrollbar
    - Swing: JScrollBar

- TextArea:
    - AWT: TextArea
    - Swing: JTextArea

- TextField:
    - AWT: TextField
    - Swing: JTextField

- Panel:
    - AWT: Panel
    - Swing: JPanel

- Frame:
    - AWT: Frame
    - Swing: JFrame

- Window (for dialogs, etc.):
    - AWT: Window
    - Swing: JDialog

- Menu:
    - AWT: Menu
    - Swing: JMenu

- MenuBar:
    - AWT: MenuBar
    - Swing: JMenuBar

- MenuItem:
    - AWT: MenuItem
    - Swing: JMenuItem

- PopupMenu:
    - AWT: PopupMenu
    - Swing: JPopupMenu

- ScrollPane:
    - AWT: ScrollPane
    - Swing: JScrollPane

- TextComponent
    - AWT: TextComponent
    - Swing: JTextComponent (Ancestor class for JTextArea, JTextField, etc.)

- TextArea:
    - AWT: TextArea
    - Swing: JTextArea

- Dialog:
    - AWT: Dialog
    - Swing: JDialog

- Label:
    - AWT: Label
    - Swing: JLabel

- ScrollPane:
    - AWT: ScrollPane
    - Swing: JScrollPane

III. Compare the event-handling of Swing and AWT applications
- AWT:
    - Delegation Model: AWT follows a delegation event model, where event handling is done by delegation. 
    Components in AWT have corresponding listener interfaces (e.g., ActionListener, MouseListener) to which
    event listener objects can be registered.

    - Anonymous Inner Classes: Event listeners in AWT are commonly implemented using anonymous inner classes, 
    which can make the code more compact but may result in less readability and maintainability, especially for
    larger applications.

    - Single Event Dispatch Thread: AWT applications typically use a single event dispatch thread (EDT) to handle
    all UI events, which means that long-running tasks in the event dispatch thread can cause the UI to become unresponsive.

- Swing:
    - Listener Model: Swing also follows the listener event model similar to AWT, where event listeners
    are registered with components to handle specific types of events. Swing provides a rich set of listener
    interfaces for various types of events (e.g., ActionListener, MouseListener, KeyListener).

    - Anonymous Inner Classes: Like AWT, Swing applications often use anonymous inner classes to implement event
    listeners, but Swing also supports other approaches such as separate listener classes or lambda expressions 
    introduced in Java 8, which can improve code readability and maintainability.

    - Concurrency: Swing introduces additional concurrency considerations compared to AWT. Swing applications must
    ensure that UI updates and event handling tasks are performed on the event dispatch thread (EDT) to prevent UI 
    responsiveness issues. Swing provides utilities like SwingUtilities.invokeLater() and SwingWorker to help manage
    concurrency in Swing applications.

    - Custom Events: Swing allows the creation of custom events and event listeners, which can be useful for implementing
    application-specific event handling logic.

    - Pluggable Look and Feel: Swing's pluggable look and feel architecture allows developers to customize the appearance 
    and behavior of their applications independently of the underlying platform. This includes customizing event handling 
    behavior related to user interactions with GUI components.